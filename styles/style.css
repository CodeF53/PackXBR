/* DropArea style file input */
#packInput > #fileInput > input {
  display: none;
}
#fileInput {
  display: flex;
  align-items: center;
  justify-content: center;
  width: 20rem;
  height: 20rem;
}
#fileInput > svg {
  width: 100%;
  height: 100%;
}
#fileInput #box {
  opacity: 0;
  transition: opacity 0.25s ease-in-out;
}
#fileInput.hasFile #box {
  opacity: 1;
}
#fileInput :is(#red-upper, #dark, #red-lower) {
  transition: translate 0.5s ease-in-out;
}
#fileInput:hover:not(.hasFile) :is(#red-upper, #red-lower) {
  translate: 1rem 0px;
}
#fileInput:hover:not(.hasFile) #dark {
  translate: -1rem 0px;
}
#packInput > .fileName {
  font-size: .8rem;
}

/* settings */
#settings {
  width: 15rem;
}
#settings > .options > * {
  padding: .25rem;
  width: 50%;
}

/* manual */
#processedContainer {
  position: relative;
}
#pathTextContainer {
  position: absolute;
  bottom: -1rem;
  max-width: 10rem;
  overflow: hidden;
  white-space: nowrap;
  text-overflow: ellipsis;
  /* to make the ... be on the left, so you can see the filename */
  direction: rtl;
}
#pathText {
  direction: ltr;
  max-width: 10rem;
  overflow: hidden;
  white-space: nowrap;
  text-overflow: ellipsis;
}

#processing canvas {
  object-fit: cover;

  min-width: 10rem;
  min-height: 10rem;

  max-width: 30rem;
  max-height: 30rem;

  animation-name: interpolatePosition;
  animation-duration: 50s;
  animation-timing-function: ease-in-out;
  animation-iteration-count: infinite;
}
@keyframes interpolatePosition {
  0% { object-position: right top; }
  50% { object-position: left bottom; }
  100% { object-position: right top; }
}


@keyframes cycleAll {
  0%   { content: "↑"; }
  33%  { content: "→"; }
  66%  { content: "↓"; }
  100% { content: "←"; }
}
.cycleAll {
  width: 1.5rem;
}
.cycleAll::after {
  animation: cycleAll 4s linear infinite;
  content: '↑';
}

@keyframes cycleLR {
  from { content: "←"; }
  to   { content: "→"; }
}
.cycleLR {
  width: 1.5rem;
}
.cycleLR::after {
  animation: cycleLR 2s linear infinite;
  content: '←';
}

@keyframes cycleUD {
  from { content: "↑"; }
  to   { content: "↓"; }
}
.cycleUD::after {
  animation: cycleUD 2s linear infinite;
  content: '↑';
}

body > #garbageHole {
  /* make not effect positioning of remaining elements in body */
  position: fixed;
  left: 0;
  top: 0;
}
/* viewerImg is only in the dom so the viewer works */
body > #garbageHole > #viewerImg { display: none; }